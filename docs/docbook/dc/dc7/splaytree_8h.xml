<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="dc/dc7/splaytree_8h">
    <title>splaytree.h File Reference</title>
        <section>
            <title> Classes </title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>struct <link linkend="d8/de3/classdsa_1_1splaytree">dsa::splaytree</link></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>struct <link linkend="d4/ddd/structdsa_1_1splaytree_1_1splaytnode">dsa::splaytree::splaytnode</link></para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <simplesect>
            <title> Namespaces </title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>struct <link linkend="de/d94/namespacedsa">dsa</link></para>
                    </listitem>
                </itemizedlist>
            </para>
        </simplesect>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file C:/Users/moghya_s/Desktop/dsalglib/source/include/splaytree.h</para>
    </simplesect>
    <literallayout><computeroutput>
1 <emphasis class="comment">//</emphasis>
2 <emphasis class="comment">//&#32;Created&#32;by&#32;moghya_s&#32;on&#32;10/1/2016.</emphasis>
3 <emphasis class="comment">//</emphasis>
4 
5 <emphasis class="preprocessor">#ifndef&#32;DSALGLIB_SPLAYTREE_H</emphasis>
6 <emphasis class="preprocessor">#define&#32;DSALGLIB_SPLAYTREE_H</emphasis>
7 <emphasis class="comment">//not&#32;working</emphasis>
8 <emphasis class="keyword">namespace&#32;</emphasis><link linkend="de/d94/namespacedsa">dsa</link>
9 {
10 
11 &#32;&#32;&#32;&#32;<emphasis class="keyword">template</emphasis>&lt;<emphasis class="keyword">class</emphasis>&#32;type&gt;
<link linkend="d8/de3/classdsa_1_1splaytree">12 </link>&#32;&#32;&#32;&#32;<emphasis class="keyword">class&#32;</emphasis><link linkend="d8/de3/classdsa_1_1splaytree">splaytree</link>
13 &#32;&#32;&#32;&#32;{
14 &#32;&#32;&#32;&#32;<emphasis class="keyword">private</emphasis>:
15 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">struct&#32;</emphasis>splaytnode
16 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17 
18 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;splaytnode&#32;&#32;&#32;*left,*right;
19 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;type&#32;&#32;&#32;&#32;data;
20 
21 
22 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;splaytnode()
23 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
24 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;left&#32;=&#32;<emphasis class="keyword">nullptr</emphasis>;
25 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;right=&#32;<emphasis class="keyword">nullptr</emphasis>;
26 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
27 
28 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;splaytnode(type&#32;param)
29 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
30 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;left&#32;=&#32;<emphasis class="keyword">nullptr</emphasis>;
31 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;right=&#32;<emphasis class="keyword">nullptr</emphasis>;
32 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;data&#32;=&#32;param;
33 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
34 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
35 
36 
37 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;splaytnode*&#32;create_splaytnode(type&#32;param)
38 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
39 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;splaytnode&#32;*temp&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;splaytnode(param);
40 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;temp;
41 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
42 
43 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;splaytnode&#32;*root;
44 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">long</emphasis>&#32;<emphasis class="keywordtype">long</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;count;
45 
46 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">void</emphasis>&#32;_rotateR(splaytnode&#32;*&#32;&amp;troot)
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
48 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;splaytnode&#32;*temp;
49 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;temp&#32;=&#32;troot-&gt;left;
50 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;troot-&gt;left&#32;=&#32;temp-&gt;right;
51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;temp-&gt;right&#32;=&#32;troot;
52 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;troot&#32;=&#32;temp;
53 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
54 
55 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">void</emphasis>&#32;&#32;_rotateL(splaytnode&#32;*&#32;&amp;troot)
56 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
57 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;splaytnode&#32;*temp;
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;temp&#32;=&#32;troot-&gt;right;
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;troot-&gt;right&#32;=&#32;temp-&gt;left;
60 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;temp-&gt;left&#32;=&#32;troot;
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;troot&#32;=&#32;temp;
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
63 
64 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">void</emphasis>&#32;_splay(splaytnode&#32;*&#32;&amp;troot,&#32;type&#32;param)
65 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
66 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(troot&#32;==&#32;<emphasis class="keyword">nullptr</emphasis>&#32;)&#32;<emphasis class="keywordflow">return</emphasis>;
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;i=0;
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(param&#32;&lt;&#32;troot-&gt;data)&#32;i=-1;
69 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">else</emphasis>&#32;<emphasis class="keywordflow">if</emphasis>(troot-&gt;data&#32;&lt;&#32;param)&#32;i=1;
70 
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(i&#32;==&#32;0)&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;;
72 
73 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(i==-1)
74 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
75 
76 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(troot-&gt;left&#32;==&#32;<emphasis class="keyword">nullptr</emphasis>)&#32;return&#32;;
77 
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(&#32;param&#32;&lt;&#32;troot-&gt;left-&gt;data&#32;)
79 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
80 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_splay(troot-&gt;left-&gt;left,&#32;param);
81 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_rotateR(troot);
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">else</emphasis>&#32;<emphasis class="keywordflow">if</emphasis>&#32;(troot-&gt;left-&gt;data&#32;&lt;&#32;param)
84 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
85 
86 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_splay(troot-&gt;left-&gt;right,&#32;param);
87 
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(troot-&gt;left-&gt;right&#32;!=&#32;<emphasis class="keyword">nullptr</emphasis>)
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_rotateL(troot-&gt;left);
90 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
91 
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(troot-&gt;left&#32;!=<emphasis class="keyword">nullptr</emphasis>)&#32;_rotateR(troot);&#32;&#32;<emphasis class="keywordflow">return</emphasis>;
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">else</emphasis>
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(troot-&gt;right&#32;==&#32;<emphasis class="keyword">nullptr</emphasis>)&#32;return&#32;;
97 
98 
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(param&#32;&lt;&#32;troot-&gt;right-&gt;data)
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_splay(troot-&gt;right-&gt;left,&#32;param);
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(troot-&gt;right-&gt;left&#32;!=&#32;<emphasis class="keyword">nullptr</emphasis>)&#32;&#32;_rotateR(troot-&gt;right);
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">else</emphasis>&#32;<emphasis class="keywordflow">if</emphasis>&#32;(troot-&gt;right-&gt;data&#32;&lt;&#32;param)
105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_splay(troot-&gt;right-&gt;right,&#32;param);
107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_rotateL(troot);
108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
109 
110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(troot-&gt;right&#32;!=<emphasis class="keyword">nullptr</emphasis>)&#32;_rotateL(troot);&#32;<emphasis class="keywordflow">return</emphasis>;
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
113 
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;splaytnode*&#32;_find_min(splaytnode*&#32;temp)
115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(temp==<emphasis class="keyword">nullptr</emphasis>)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<emphasis class="keyword">nullptr</emphasis>;
117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(temp-&gt;left==<emphasis class="keyword">nullptr</emphasis>)&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;temp;
118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;_find_min(temp-&gt;left);
119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
120 
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;splaytnode*&#32;_find_max(splaytnode*&#32;temp)
122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(temp==<emphasis class="keyword">nullptr</emphasis>)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<emphasis class="keyword">nullptr</emphasis>;
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(temp-&gt;right==<emphasis class="keyword">nullptr</emphasis>)&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;temp;
125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;_find_max(temp-&gt;right);
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
127 
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;_insert(splaytnode&#32;*temp)
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
130 
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_splay(root,temp-&gt;data);
132 
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(root-&gt;data&#32;&lt;&#32;temp-&gt;data)
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;temp-&gt;left&#32;=&#32;root;
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;root&#32;=&#32;temp;
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">else</emphasis>
139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;temp-&gt;right&#32;=&#32;root;
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;root&#32;=&#32;temp;
142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
143 
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<emphasis class="keyword">true</emphasis>;
145 
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
147 
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;splaytnode*&#32;_remove(splaytnode&#32;*troot,type&#32;param)
149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
150 
151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(&#32;troot&#32;==&#32;<emphasis class="keyword">nullptr</emphasis>&#32;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;troot;
152 
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(&#32;param&#32;&lt;&#32;troot-&gt;data&#32;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;troot-&gt;left&#32;=&#32;_remove(troot-&gt;left,param);
154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">else</emphasis>&#32;<emphasis class="keywordflow">if</emphasis>(&#32;troot-&gt;data&#32;&lt;&#32;param&#32;)&#32;&#32;troot-&gt;right&#32;=_remove(troot-&gt;right,param);
155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">else</emphasis>&#32;<emphasis class="keywordflow">if</emphasis>(troot-&gt;left!=<emphasis class="keyword">nullptr</emphasis>&amp;&amp;troot-&gt;right!=<emphasis class="keyword">nullptr</emphasis>)
156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;troot-&gt;data&#32;=&#32;_find_min(troot-&gt;right)-&gt;data;
158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;troot-&gt;right&#32;=&#32;_remove(troot-&gt;right,troot-&gt;data);
159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">else</emphasis>
161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;splaytnode&#32;*temp&#32;=&#32;troot;
163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;troot&#32;=&#32;(&#32;troot-&gt;left&#32;!=&#32;nullptr&#32;)&#32;?&#32;troot-&gt;left&#32;:&#32;troot-&gt;right;
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">delete</emphasis>&#32;temp;&#32;&#32;count--;
165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;troot;
167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
168 
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">void</emphasis>&#32;_clear(splaytnode&#32;*temp)
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(temp==<emphasis class="keyword">nullptr</emphasis>)&#32;<emphasis class="keywordflow">return</emphasis>;
172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_clear(temp-&gt;left);
173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_clear(temp-&gt;right);
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">remove</emphasis>(temp-&gt;data);
175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
176 
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">void</emphasis>&#32;_inorder(splaytnode&#32;*temp,<emphasis class="keywordtype">void</emphasis>&#32;(fun)(type&#32;obj))
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(temp==<emphasis class="keyword">nullptr</emphasis>)&#32;<emphasis class="keywordflow">return</emphasis>;
180 
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_inorder(temp-&gt;left,fun);
182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fun(temp-&gt;data);
183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_inorder(temp-&gt;right,fun);
184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
185 
186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">void</emphasis>&#32;_preorder(splaytnode&#32;*temp,<emphasis class="keywordtype">void</emphasis>&#32;(fun)(type&#32;obj))
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(temp==<emphasis class="keyword">nullptr</emphasis>)&#32;<emphasis class="keywordflow">return</emphasis>;
189 
190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fun(temp-&gt;data);
191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_preorder(temp-&gt;left,fun);
192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_preorder(temp-&gt;right,fun);
193 
194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
195 
196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">void</emphasis>&#32;_postorder(splaytnode&#32;*temp,<emphasis class="keywordtype">void</emphasis>&#32;(fun)(type&#32;obj))
197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(temp==<emphasis class="keyword">nullptr</emphasis>)&#32;<emphasis class="keywordflow">return</emphasis>;
199 
200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_postorder(temp-&gt;left,fun);
201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_postorder(temp-&gt;right,fun);
202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fun(temp-&gt;data);
203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
204 
205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">void</emphasis>&#32;_bfs(<emphasis class="keywordtype">void</emphasis>&#32;(fun)&#32;(type&#32;obj))
206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="dc/d3c/classdsa_1_1queue">queue&lt;splaytnode *&gt;</link>&#32;q;
208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;splaytnode&#32;*temp;
209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(root!=<emphasis class="keyword">nullptr</emphasis>)
210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;q.<link linkend="dc/d3c/classdsa_1_1queue_1af66c3129f96357af900032b83079b20e">enqueue</link>(root);
212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">while</emphasis>(!q.<link linkend="dc/d3c/classdsa_1_1queue_1aacb170201d811e7d3329c84334fc6de3">isempty</link>())
213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;temp=q.<link linkend="dc/d3c/classdsa_1_1queue_1a9d1178866d2b787aa7947619694ae654">front_element</link>();
215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fun(temp-&gt;data);
216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(temp-&gt;left!=<emphasis class="keyword">nullptr</emphasis>)&#32;&#32;&#32;&#32;&#32;&#32;q.<link linkend="dc/d3c/classdsa_1_1queue_1af66c3129f96357af900032b83079b20e">enqueue</link>(temp-&gt;left);
217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(temp-&gt;right!=<emphasis class="keyword">nullptr</emphasis>)&#32;&#32;&#32;&#32;&#32;q.<link linkend="dc/d3c/classdsa_1_1queue_1af66c3129f96357af900032b83079b20e">enqueue</link>(temp-&gt;right);
218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;q.<link linkend="dc/d3c/classdsa_1_1queue_1a332155c1b5d709b703302e4300c62157">dequeue</link>();
219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
222 
223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">long</emphasis>&#32;<emphasis class="keywordtype">long</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;_height(splaytnode&#32;*temp)
224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(temp==<emphasis class="keyword">nullptr</emphasis>)&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;-1;
226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="de/d94/namespacedsa_1a679b87e61754a4876290b6c8ee238c9d">maxof</link>(_height(temp-&gt;left),_height(temp-&gt;right))+1;
227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
228 
229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;splaytnode*&#32;_search(splaytnode&#32;*temp,type&#32;val)
230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
231 
232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
233 
234 &#32;&#32;&#32;&#32;<emphasis class="keyword">public</emphasis>:
235 
<link linkend="d8/de3/classdsa_1_1splaytree_1a5eac748bc90f4b9ed911212fb861057c">236 </link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="d8/de3/classdsa_1_1splaytree_1a5eac748bc90f4b9ed911212fb861057c">splaytree</link>()
237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;root&#32;=&#32;<emphasis class="keyword">nullptr</emphasis>;
239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count=0;
240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
241 
<link linkend="d8/de3/classdsa_1_1splaytree_1a17cb06f5903351a44490312190e46fd1">242 </link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;type&#32;<link linkend="d8/de3/classdsa_1_1splaytree_1a17cb06f5903351a44490312190e46fd1">find_min</link>()
243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;_find_min(root)-&gt;data;
245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
246 
<link linkend="d8/de3/classdsa_1_1splaytree_1aa15b92dd4d3129839c6dc4e10d054f26">247 </link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;type&#32;<link linkend="d8/de3/classdsa_1_1splaytree_1aa15b92dd4d3129839c6dc4e10d054f26">find_max</link>()
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;_find_max(root)-&gt;data;
250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
251 
<link linkend="d8/de3/classdsa_1_1splaytree_1a93bd47920917dc58eee056fad4b4c8be">252 </link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;<link linkend="d8/de3/classdsa_1_1splaytree_1a93bd47920917dc58eee056fad4b4c8be">insert</link>(type&#32;param)
253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;splaytnode&#32;*temp&#32;=&#32;create_splaytnode(param);
255 
256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(root==<emphasis class="keyword">nullptr</emphasis>)
257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;root=temp;
258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">else</emphasis>
259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_insert(temp);
260 
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count++;
262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<emphasis class="keyword">true</emphasis>;
263 
264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
265 
<link linkend="d8/de3/classdsa_1_1splaytree_1aa5ab68a96a34c21964192b5ba6e45d74">266 </link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;<emphasis class="keyword">remove</emphasis>(type&#32;param)
267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
268 
269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
270 
<link linkend="d8/de3/classdsa_1_1splaytree_1a08fd5b97c35ca13bc4c21a5ad77ba464">271 </link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;type&#32;<link linkend="d8/de3/classdsa_1_1splaytree_1a08fd5b97c35ca13bc4c21a5ad77ba464">tree_root</link>()
272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;root-&gt;data;
274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
275 
<link linkend="d8/de3/classdsa_1_1splaytree_1a1994f9177f129b3534e64506c39a6cde">276 </link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">long</emphasis>&#32;<emphasis class="keywordtype">long</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;<link linkend="d8/de3/classdsa_1_1splaytree_1a1994f9177f129b3534e64506c39a6cde">size</link>()
277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;count;
279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
280 
<link linkend="d8/de3/classdsa_1_1splaytree_1a04d036e1db3fd1d5daf00acd12aa790b">281 </link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">void</emphasis>&#32;<link linkend="d8/de3/classdsa_1_1splaytree_1a04d036e1db3fd1d5daf00acd12aa790b">clear</link>()
282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_clear(root);
284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
285 
<link linkend="d8/de3/classdsa_1_1splaytree_1a1381e4c740c3371e184b75ccd27b618a">286 </link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">long</emphasis>&#32;<emphasis class="keywordtype">long</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;<link linkend="d8/de3/classdsa_1_1splaytree_1a1381e4c740c3371e184b75ccd27b618a">height</link>()
287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;_height(root);
289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
290 
<link linkend="d8/de3/classdsa_1_1splaytree_1a40f0b3c2040161d70865129be7fb33c5">291 </link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;<link linkend="d8/de3/classdsa_1_1splaytree_1a40f0b3c2040161d70865129be7fb33c5">isempty</link>()
292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(count==0)
294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<emphasis class="keyword">true</emphasis>;
295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">else</emphasis>
296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<emphasis class="keyword">false</emphasis>;
297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
298 
<link linkend="d8/de3/classdsa_1_1splaytree_1abfd1daa0395ad387ccee9fc76f48b45a">299 </link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">void</emphasis>&#32;<link linkend="d8/de3/classdsa_1_1splaytree_1abfd1daa0395ad387ccee9fc76f48b45a">inorder</link>(<emphasis class="keywordtype">void</emphasis>&#32;(fun)(type&#32;obj))
300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_inorder(root,fun);
302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
303 
<link linkend="d8/de3/classdsa_1_1splaytree_1a251217acc123c990a5a52aca36a76028">304 </link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">void</emphasis>&#32;<link linkend="d8/de3/classdsa_1_1splaytree_1a251217acc123c990a5a52aca36a76028">preorder</link>(<emphasis class="keywordtype">void</emphasis>&#32;(fun)(type&#32;obj))
305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_preorder(root,fun);
307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
308 
<link linkend="d8/de3/classdsa_1_1splaytree_1aab34ce58381a447ccbe1b8370bc2cd0e">309 </link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">void</emphasis>&#32;<link linkend="d8/de3/classdsa_1_1splaytree_1aab34ce58381a447ccbe1b8370bc2cd0e">postorder</link>(<emphasis class="keywordtype">void</emphasis>&#32;(fun)(type&#32;obj))
310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_postorder(root,fun);
312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
313 
<link linkend="d8/de3/classdsa_1_1splaytree_1a119c5ccc2c2e212d65e81c864ff420d3">314 </link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">void</emphasis>&#32;<link linkend="d8/de3/classdsa_1_1splaytree_1a119c5ccc2c2e212d65e81c864ff420d3">bfs</link>(<emphasis class="keywordtype">void</emphasis>&#32;(fun)&#32;(type&#32;obj))
315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_bfs(fun);
317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
318 
<link linkend="d8/de3/classdsa_1_1splaytree_1a4e92bfd8b941f3a9956c904df3e2bdf3">319 </link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;<link linkend="d8/de3/classdsa_1_1splaytree_1a4e92bfd8b941f3a9956c904df3e2bdf3">search</link>(type&#32;val)
320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
321 
322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
323 
324 &#32;&#32;&#32;&#32;};
325 }
326 <emphasis class="preprocessor">#endif&#32;//DSALGLIB_SPLAYTREE_H</emphasis>
    </computeroutput></literallayout>
</section>
